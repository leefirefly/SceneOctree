// Generated by gencpp from file abstract_msgs/SceneQuery.msg
// DO NOT EDIT!


#ifndef ABSTRACT_MSGS_MESSAGE_SCENEQUERY_H
#define ABSTRACT_MSGS_MESSAGE_SCENEQUERY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <abstract_msgs/LayerQuery.h>

namespace abstract_msgs
{
template <class ContainerAllocator>
struct SceneQuery_
{
  typedef SceneQuery_<ContainerAllocator> Type;

  SceneQuery_()
    : sceneName()
    , layerVec()
    , senderID(0)
    , isHeartbeat(false)
    , isStop(false)  {
    }
  SceneQuery_(const ContainerAllocator& _alloc)
    : sceneName(_alloc)
    , layerVec(_alloc)
    , senderID(0)
    , isHeartbeat(false)
    , isStop(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _sceneName_type;
  _sceneName_type sceneName;

   typedef std::vector< ::abstract_msgs::LayerQuery_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::abstract_msgs::LayerQuery_<ContainerAllocator> >::other >  _layerVec_type;
  _layerVec_type layerVec;

   typedef int32_t _senderID_type;
  _senderID_type senderID;

   typedef uint8_t _isHeartbeat_type;
  _isHeartbeat_type isHeartbeat;

   typedef uint8_t _isStop_type;
  _isStop_type isStop;





  typedef boost::shared_ptr< ::abstract_msgs::SceneQuery_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abstract_msgs::SceneQuery_<ContainerAllocator> const> ConstPtr;

}; // struct SceneQuery_

typedef ::abstract_msgs::SceneQuery_<std::allocator<void> > SceneQuery;

typedef boost::shared_ptr< ::abstract_msgs::SceneQuery > SceneQueryPtr;
typedef boost::shared_ptr< ::abstract_msgs::SceneQuery const> SceneQueryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abstract_msgs::SceneQuery_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abstract_msgs::SceneQuery_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace abstract_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'abstract_msgs': ['/home/lee_firefly/SceneOcTree/catkin_ll/src/abstract_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::abstract_msgs::SceneQuery_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abstract_msgs::SceneQuery_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abstract_msgs::SceneQuery_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abstract_msgs::SceneQuery_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abstract_msgs::SceneQuery_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abstract_msgs::SceneQuery_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abstract_msgs::SceneQuery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "77e12209bfa06f6dc3b213463f217e9b";
  }

  static const char* value(const ::abstract_msgs::SceneQuery_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x77e12209bfa06f6dULL;
  static const uint64_t static_value2 = 0xc3b213463f217e9bULL;
};

template<class ContainerAllocator>
struct DataType< ::abstract_msgs::SceneQuery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abstract_msgs/SceneQuery";
  }

  static const char* value(const ::abstract_msgs::SceneQuery_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abstract_msgs::SceneQuery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string sceneName\n\
LayerQuery[] layerVec\n\
int32 senderID\n\
bool isHeartbeat\n\
bool isStop\n\
================================================================================\n\
MSG: abstract_msgs/LayerQuery\n\
string layerName\n\
\n\
ActorQuery[] actorVec\n\
\n\
bool spaceConstraint\n\
float64 xMin\n\
float64 xMax\n\
float64 yMin\n\
float64 yMax\n\
float64 zMin\n\
float64 zMax\n\
\n\
int32 layerType\n\
\n\
string timeStart\n\
string timeEnd\n\
\n\
int32 frequency\n\
\n\
string[] eventMsgVec\n\
\n\
bool isStop\n\
================================================================================\n\
MSG: abstract_msgs/ActorQuery\n\
int32 swarmID\n\
string taskName\n\
string actorName\n\
int32 robotID\n\
string[] dataTypeVec\n\
";
  }

  static const char* value(const ::abstract_msgs::SceneQuery_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abstract_msgs::SceneQuery_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sceneName);
      stream.next(m.layerVec);
      stream.next(m.senderID);
      stream.next(m.isHeartbeat);
      stream.next(m.isStop);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SceneQuery_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abstract_msgs::SceneQuery_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abstract_msgs::SceneQuery_<ContainerAllocator>& v)
  {
    s << indent << "sceneName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sceneName);
    s << indent << "layerVec[]" << std::endl;
    for (size_t i = 0; i < v.layerVec.size(); ++i)
    {
      s << indent << "  layerVec[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::abstract_msgs::LayerQuery_<ContainerAllocator> >::stream(s, indent + "    ", v.layerVec[i]);
    }
    s << indent << "senderID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.senderID);
    s << indent << "isHeartbeat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isHeartbeat);
    s << indent << "isStop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isStop);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABSTRACT_MSGS_MESSAGE_SCENEQUERY_H
