# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from abstract_msgs/EventSceneMap.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import abstract_msgs.msg

class EventSceneMap(genpy.Message):
  _md5sum = "f2becf816840a945292dcaa58be0823d"
  _type = "abstract_msgs/EventSceneMap"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string event
#string[] sceneName
#string[] layerName
#int32[] receiverID

EventQuery[] eventVec
================================================================================
MSG: abstract_msgs/EventQuery
string event
string sceneName
string layerName
int32 receiverID

bool spaceConstraint
float64 xMin
float64 xMax
float64 yMin
float64 yMax
float64 zMin
float64 zMax

bool isStop"""
  __slots__ = ['event','eventVec']
  _slot_types = ['string','abstract_msgs/EventQuery[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       event,eventVec

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EventSceneMap, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.event is None:
        self.event = ''
      if self.eventVec is None:
        self.eventVec = []
    else:
      self.event = ''
      self.eventVec = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.event
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.eventVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.eventVec:
        _x = val1.event
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.sceneName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.layerName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_iB6dB().pack(_x.receiverID, _x.spaceConstraint, _x.xMin, _x.xMax, _x.yMin, _x.yMax, _x.zMin, _x.zMax, _x.isStop))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.eventVec is None:
        self.eventVec = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.event = str[start:end].decode('utf-8')
      else:
        self.event = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.eventVec = []
      for i in range(0, length):
        val1 = abstract_msgs.msg.EventQuery()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.event = str[start:end].decode('utf-8')
        else:
          val1.event = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.sceneName = str[start:end].decode('utf-8')
        else:
          val1.sceneName = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.layerName = str[start:end].decode('utf-8')
        else:
          val1.layerName = str[start:end]
        _x = val1
        start = end
        end += 54
        (_x.receiverID, _x.spaceConstraint, _x.xMin, _x.xMax, _x.yMin, _x.yMax, _x.zMin, _x.zMax, _x.isStop,) = _get_struct_iB6dB().unpack(str[start:end])
        val1.spaceConstraint = bool(val1.spaceConstraint)
        val1.isStop = bool(val1.isStop)
        self.eventVec.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.event
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.eventVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.eventVec:
        _x = val1.event
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.sceneName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.layerName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_iB6dB().pack(_x.receiverID, _x.spaceConstraint, _x.xMin, _x.xMax, _x.yMin, _x.yMax, _x.zMin, _x.zMax, _x.isStop))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.eventVec is None:
        self.eventVec = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.event = str[start:end].decode('utf-8')
      else:
        self.event = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.eventVec = []
      for i in range(0, length):
        val1 = abstract_msgs.msg.EventQuery()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.event = str[start:end].decode('utf-8')
        else:
          val1.event = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.sceneName = str[start:end].decode('utf-8')
        else:
          val1.sceneName = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.layerName = str[start:end].decode('utf-8')
        else:
          val1.layerName = str[start:end]
        _x = val1
        start = end
        end += 54
        (_x.receiverID, _x.spaceConstraint, _x.xMin, _x.xMax, _x.yMin, _x.yMax, _x.zMin, _x.zMax, _x.isStop,) = _get_struct_iB6dB().unpack(str[start:end])
        val1.spaceConstraint = bool(val1.spaceConstraint)
        val1.isStop = bool(val1.isStop)
        self.eventVec.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_iB6dB = None
def _get_struct_iB6dB():
    global _struct_iB6dB
    if _struct_iB6dB is None:
        _struct_iB6dB = struct.Struct("<iB6dB")
    return _struct_iB6dB
