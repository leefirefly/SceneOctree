// Generated by gencpp from file abstract_msgs/QueryResult.msg
// DO NOT EDIT!


#ifndef ABSTRACT_MSGS_MESSAGE_QUERYRESULT_H
#define ABSTRACT_MSGS_MESSAGE_QUERYRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <abstract_msgs/UnifiedData.h>

namespace abstract_msgs
{
template <class ContainerAllocator>
struct QueryResult_
{
  typedef QueryResult_<ContainerAllocator> Type;

  QueryResult_()
    : senderID(0)
    , receiverID(0)
    , layerName()
    , sceneName()
    , data()
    , count(0)  {
    }
  QueryResult_(const ContainerAllocator& _alloc)
    : senderID(0)
    , receiverID(0)
    , layerName(_alloc)
    , sceneName(_alloc)
    , data(_alloc)
    , count(0)  {
  (void)_alloc;
    }



   typedef int32_t _senderID_type;
  _senderID_type senderID;

   typedef int32_t _receiverID_type;
  _receiverID_type receiverID;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _layerName_type;
  _layerName_type layerName;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _sceneName_type;
  _sceneName_type sceneName;

   typedef  ::abstract_msgs::UnifiedData_<ContainerAllocator>  _data_type;
  _data_type data;

   typedef int32_t _count_type;
  _count_type count;





  typedef boost::shared_ptr< ::abstract_msgs::QueryResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abstract_msgs::QueryResult_<ContainerAllocator> const> ConstPtr;

}; // struct QueryResult_

typedef ::abstract_msgs::QueryResult_<std::allocator<void> > QueryResult;

typedef boost::shared_ptr< ::abstract_msgs::QueryResult > QueryResultPtr;
typedef boost::shared_ptr< ::abstract_msgs::QueryResult const> QueryResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abstract_msgs::QueryResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abstract_msgs::QueryResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace abstract_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'abstract_msgs': ['/home/lee_firefly/catkin_ws/src/abstract_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::abstract_msgs::QueryResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abstract_msgs::QueryResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abstract_msgs::QueryResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abstract_msgs::QueryResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abstract_msgs::QueryResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abstract_msgs::QueryResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abstract_msgs::QueryResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "70f9ebe3b3f848562f53b546def58afa";
  }

  static const char* value(const ::abstract_msgs::QueryResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x70f9ebe3b3f84856ULL;
  static const uint64_t static_value2 = 0x2f53b546def58afaULL;
};

template<class ContainerAllocator>
struct DataType< ::abstract_msgs::QueryResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abstract_msgs/QueryResult";
  }

  static const char* value(const ::abstract_msgs::QueryResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abstract_msgs::QueryResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 senderID\n\
int32 receiverID\n\
string layerName\n\
string sceneName\n\
abstract_msgs/UnifiedData data\n\
\n\
int32 count\n\
\n\
================================================================================\n\
MSG: abstract_msgs/UnifiedData\n\
int32 swarmID\n\
string taskName\n\
string actorName\n\
int32 robotID\n\
string timeStamp\n\
geometry_msgs/Pose robotPose\n\
geometry_msgs/Pose sensorPose\n\
string dataType\n\
uint8[] data\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::abstract_msgs::QueryResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abstract_msgs::QueryResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.senderID);
      stream.next(m.receiverID);
      stream.next(m.layerName);
      stream.next(m.sceneName);
      stream.next(m.data);
      stream.next(m.count);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QueryResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abstract_msgs::QueryResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abstract_msgs::QueryResult_<ContainerAllocator>& v)
  {
    s << indent << "senderID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.senderID);
    s << indent << "receiverID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.receiverID);
    s << indent << "layerName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.layerName);
    s << indent << "sceneName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sceneName);
    s << indent << "data: ";
    s << std::endl;
    Printer< ::abstract_msgs::UnifiedData_<ContainerAllocator> >::stream(s, indent + "  ", v.data);
    s << indent << "count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.count);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABSTRACT_MSGS_MESSAGE_QUERYRESULT_H
