// Generated by gencpp from file abstract_msgs/ActorQuery.msg
// DO NOT EDIT!


#ifndef ABSTRACT_MSGS_MESSAGE_ACTORQUERY_H
#define ABSTRACT_MSGS_MESSAGE_ACTORQUERY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace abstract_msgs
{
template <class ContainerAllocator>
struct ActorQuery_
{
  typedef ActorQuery_<ContainerAllocator> Type;

  ActorQuery_()
    : swarmID(0)
    , taskName()
    , actorName()
    , robotID(0)
    , dataTypeVec()  {
    }
  ActorQuery_(const ContainerAllocator& _alloc)
    : swarmID(0)
    , taskName(_alloc)
    , actorName(_alloc)
    , robotID(0)
    , dataTypeVec(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _swarmID_type;
  _swarmID_type swarmID;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _taskName_type;
  _taskName_type taskName;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _actorName_type;
  _actorName_type actorName;

   typedef int32_t _robotID_type;
  _robotID_type robotID;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _dataTypeVec_type;
  _dataTypeVec_type dataTypeVec;





  typedef boost::shared_ptr< ::abstract_msgs::ActorQuery_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abstract_msgs::ActorQuery_<ContainerAllocator> const> ConstPtr;

}; // struct ActorQuery_

typedef ::abstract_msgs::ActorQuery_<std::allocator<void> > ActorQuery;

typedef boost::shared_ptr< ::abstract_msgs::ActorQuery > ActorQueryPtr;
typedef boost::shared_ptr< ::abstract_msgs::ActorQuery const> ActorQueryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abstract_msgs::ActorQuery_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abstract_msgs::ActorQuery_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace abstract_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'abstract_msgs': ['/home/lee_firefly/catkin_ws/src/abstract_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::abstract_msgs::ActorQuery_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abstract_msgs::ActorQuery_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abstract_msgs::ActorQuery_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abstract_msgs::ActorQuery_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abstract_msgs::ActorQuery_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abstract_msgs::ActorQuery_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abstract_msgs::ActorQuery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a01d38376bdfcaa1a71265cfaf842128";
  }

  static const char* value(const ::abstract_msgs::ActorQuery_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa01d38376bdfcaa1ULL;
  static const uint64_t static_value2 = 0xa71265cfaf842128ULL;
};

template<class ContainerAllocator>
struct DataType< ::abstract_msgs::ActorQuery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abstract_msgs/ActorQuery";
  }

  static const char* value(const ::abstract_msgs::ActorQuery_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abstract_msgs::ActorQuery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 swarmID\n\
string taskName\n\
string actorName\n\
int32 robotID\n\
string[] dataTypeVec\n\
";
  }

  static const char* value(const ::abstract_msgs::ActorQuery_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abstract_msgs::ActorQuery_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.swarmID);
      stream.next(m.taskName);
      stream.next(m.actorName);
      stream.next(m.robotID);
      stream.next(m.dataTypeVec);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActorQuery_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abstract_msgs::ActorQuery_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abstract_msgs::ActorQuery_<ContainerAllocator>& v)
  {
    s << indent << "swarmID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.swarmID);
    s << indent << "taskName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.taskName);
    s << indent << "actorName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.actorName);
    s << indent << "robotID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robotID);
    s << indent << "dataTypeVec[]" << std::endl;
    for (size_t i = 0; i < v.dataTypeVec.size(); ++i)
    {
      s << indent << "  dataTypeVec[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.dataTypeVec[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABSTRACT_MSGS_MESSAGE_ACTORQUERY_H
