// Generated by gencpp from file abstract_msgs/EventQuery.msg
// DO NOT EDIT!


#ifndef ABSTRACT_MSGS_MESSAGE_EVENTQUERY_H
#define ABSTRACT_MSGS_MESSAGE_EVENTQUERY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace abstract_msgs
{
template <class ContainerAllocator>
struct EventQuery_
{
  typedef EventQuery_<ContainerAllocator> Type;

  EventQuery_()
    : event()
    , sceneName()
    , layerName()
    , receiverID(0)
    , spaceConstraint(false)
    , xMin(0.0)
    , xMax(0.0)
    , yMin(0.0)
    , yMax(0.0)
    , zMin(0.0)
    , zMax(0.0)
    , isStop(false)  {
    }
  EventQuery_(const ContainerAllocator& _alloc)
    : event(_alloc)
    , sceneName(_alloc)
    , layerName(_alloc)
    , receiverID(0)
    , spaceConstraint(false)
    , xMin(0.0)
    , xMax(0.0)
    , yMin(0.0)
    , yMax(0.0)
    , zMin(0.0)
    , zMax(0.0)
    , isStop(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _event_type;
  _event_type event;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _sceneName_type;
  _sceneName_type sceneName;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _layerName_type;
  _layerName_type layerName;

   typedef int32_t _receiverID_type;
  _receiverID_type receiverID;

   typedef uint8_t _spaceConstraint_type;
  _spaceConstraint_type spaceConstraint;

   typedef double _xMin_type;
  _xMin_type xMin;

   typedef double _xMax_type;
  _xMax_type xMax;

   typedef double _yMin_type;
  _yMin_type yMin;

   typedef double _yMax_type;
  _yMax_type yMax;

   typedef double _zMin_type;
  _zMin_type zMin;

   typedef double _zMax_type;
  _zMax_type zMax;

   typedef uint8_t _isStop_type;
  _isStop_type isStop;





  typedef boost::shared_ptr< ::abstract_msgs::EventQuery_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abstract_msgs::EventQuery_<ContainerAllocator> const> ConstPtr;

}; // struct EventQuery_

typedef ::abstract_msgs::EventQuery_<std::allocator<void> > EventQuery;

typedef boost::shared_ptr< ::abstract_msgs::EventQuery > EventQueryPtr;
typedef boost::shared_ptr< ::abstract_msgs::EventQuery const> EventQueryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abstract_msgs::EventQuery_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abstract_msgs::EventQuery_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace abstract_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'abstract_msgs': ['/home/lee_firefly/catkin_ws/src/abstract_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::abstract_msgs::EventQuery_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abstract_msgs::EventQuery_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abstract_msgs::EventQuery_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abstract_msgs::EventQuery_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abstract_msgs::EventQuery_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abstract_msgs::EventQuery_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abstract_msgs::EventQuery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9059fc23f354e330ff575a1940e2342c";
  }

  static const char* value(const ::abstract_msgs::EventQuery_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9059fc23f354e330ULL;
  static const uint64_t static_value2 = 0xff575a1940e2342cULL;
};

template<class ContainerAllocator>
struct DataType< ::abstract_msgs::EventQuery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abstract_msgs/EventQuery";
  }

  static const char* value(const ::abstract_msgs::EventQuery_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abstract_msgs::EventQuery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string event\n\
string sceneName\n\
string layerName\n\
int32 receiverID\n\
\n\
bool spaceConstraint\n\
float64 xMin\n\
float64 xMax\n\
float64 yMin\n\
float64 yMax\n\
float64 zMin\n\
float64 zMax\n\
\n\
bool isStop\n\
";
  }

  static const char* value(const ::abstract_msgs::EventQuery_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abstract_msgs::EventQuery_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.event);
      stream.next(m.sceneName);
      stream.next(m.layerName);
      stream.next(m.receiverID);
      stream.next(m.spaceConstraint);
      stream.next(m.xMin);
      stream.next(m.xMax);
      stream.next(m.yMin);
      stream.next(m.yMax);
      stream.next(m.zMin);
      stream.next(m.zMax);
      stream.next(m.isStop);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EventQuery_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abstract_msgs::EventQuery_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abstract_msgs::EventQuery_<ContainerAllocator>& v)
  {
    s << indent << "event: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.event);
    s << indent << "sceneName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sceneName);
    s << indent << "layerName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.layerName);
    s << indent << "receiverID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.receiverID);
    s << indent << "spaceConstraint: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.spaceConstraint);
    s << indent << "xMin: ";
    Printer<double>::stream(s, indent + "  ", v.xMin);
    s << indent << "xMax: ";
    Printer<double>::stream(s, indent + "  ", v.xMax);
    s << indent << "yMin: ";
    Printer<double>::stream(s, indent + "  ", v.yMin);
    s << indent << "yMax: ";
    Printer<double>::stream(s, indent + "  ", v.yMax);
    s << indent << "zMin: ";
    Printer<double>::stream(s, indent + "  ", v.zMin);
    s << indent << "zMax: ";
    Printer<double>::stream(s, indent + "  ", v.zMax);
    s << indent << "isStop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isStop);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABSTRACT_MSGS_MESSAGE_EVENTQUERY_H
