# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rosplane_msgs/Current_Path.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Current_Path(genpy.Message):
  _md5sum = "b52f013e59f3829f22fea8be747f9d25"
  _type = "rosplane_msgs/Current_Path"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Current path output from the path manager, input to path follower

# @warning Va_d have always to be valid,
# r and q need to be valid if path_type == LINE_PATH
# c, rho, and, lambda need to be valid if path_type == ORBIT_PATH
uint8 path_type		# Indicates strait line or orbital path
float32 Va_d		# Desired airspeed (m/s)
float32[3] r		# Vector to origin of straight line path (m)
float32[3] q		# Unit vector, desired direction of travel for line path
float32[3] c		# Center of orbital path (m)
float32 rho		# Radius of orbital path (m)
float32 h_c             # desire altitude (m) add by kobe
int8 lambda		# Direction of orbital path (clockwise is 1, counterclockwise is -1)

uint8 ORBIT_PATH = 0
uint8 LINE_PATH = 1

int8 CLOCKWISE = 1
int8 COUNT_CLOCKWISE = -1

bool landing	   #added by zhaolin
"""
  # Pseudo-constants
  ORBIT_PATH = 0
  LINE_PATH = 1
  CLOCKWISE = 1
  COUNT_CLOCKWISE = -1

  __slots__ = ['path_type','Va_d','r','q','c','rho','h_c','lambda_','landing']
  _slot_types = ['uint8','float32','float32[3]','float32[3]','float32[3]','float32','float32','int8','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       path_type,Va_d,r,q,c,rho,h_c,lambda_,landing

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Current_Path, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.path_type is None:
        self.path_type = 0
      if self.Va_d is None:
        self.Va_d = 0.
      if self.r is None:
        self.r = [0.] * 3
      if self.q is None:
        self.q = [0.] * 3
      if self.c is None:
        self.c = [0.] * 3
      if self.rho is None:
        self.rho = 0.
      if self.h_c is None:
        self.h_c = 0.
      if self.lambda_ is None:
        self.lambda_ = 0
      if self.landing is None:
        self.landing = False
    else:
      self.path_type = 0
      self.Va_d = 0.
      self.r = [0.] * 3
      self.q = [0.] * 3
      self.c = [0.] * 3
      self.rho = 0.
      self.h_c = 0.
      self.lambda_ = 0
      self.landing = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Bf().pack(_x.path_type, _x.Va_d))
      buff.write(_get_struct_3f().pack(*self.r))
      buff.write(_get_struct_3f().pack(*self.q))
      buff.write(_get_struct_3f().pack(*self.c))
      _x = self
      buff.write(_get_struct_2fbB().pack(_x.rho, _x.h_c, _x.lambda_, _x.landing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.path_type, _x.Va_d,) = _get_struct_Bf().unpack(str[start:end])
      start = end
      end += 12
      self.r = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.q = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.c = _get_struct_3f().unpack(str[start:end])
      _x = self
      start = end
      end += 10
      (_x.rho, _x.h_c, _x.lambda_, _x.landing,) = _get_struct_2fbB().unpack(str[start:end])
      self.landing = bool(self.landing)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Bf().pack(_x.path_type, _x.Va_d))
      buff.write(self.r.tostring())
      buff.write(self.q.tostring())
      buff.write(self.c.tostring())
      _x = self
      buff.write(_get_struct_2fbB().pack(_x.rho, _x.h_c, _x.lambda_, _x.landing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.path_type, _x.Va_d,) = _get_struct_Bf().unpack(str[start:end])
      start = end
      end += 12
      self.r = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.q = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.c = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      _x = self
      start = end
      end += 10
      (_x.rho, _x.h_c, _x.lambda_, _x.landing,) = _get_struct_2fbB().unpack(str[start:end])
      self.landing = bool(self.landing)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2fbB = None
def _get_struct_2fbB():
    global _struct_2fbB
    if _struct_2fbB is None:
        _struct_2fbB = struct.Struct("<2fbB")
    return _struct_2fbB
_struct_Bf = None
def _get_struct_Bf():
    global _struct_Bf
    if _struct_Bf is None:
        _struct_Bf = struct.Struct("<Bf")
    return _struct_Bf
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
