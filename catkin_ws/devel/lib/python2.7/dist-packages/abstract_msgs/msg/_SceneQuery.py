# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from abstract_msgs/SceneQuery.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import abstract_msgs.msg

class SceneQuery(genpy.Message):
  _md5sum = "77e12209bfa06f6dc3b213463f217e9b"
  _type = "abstract_msgs/SceneQuery"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string sceneName
LayerQuery[] layerVec
int32 senderID
bool isHeartbeat
bool isStop
================================================================================
MSG: abstract_msgs/LayerQuery
string layerName

ActorQuery[] actorVec

bool spaceConstraint
float64 xMin
float64 xMax
float64 yMin
float64 yMax
float64 zMin
float64 zMax

int32 layerType

string timeStart
string timeEnd

int32 frequency

string[] eventMsgVec

bool isStop
================================================================================
MSG: abstract_msgs/ActorQuery
int32 swarmID
string taskName
string actorName
int32 robotID
string[] dataTypeVec"""
  __slots__ = ['sceneName','layerVec','senderID','isHeartbeat','isStop']
  _slot_types = ['string','abstract_msgs/LayerQuery[]','int32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sceneName,layerVec,senderID,isHeartbeat,isStop

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SceneQuery, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sceneName is None:
        self.sceneName = ''
      if self.layerVec is None:
        self.layerVec = []
      if self.senderID is None:
        self.senderID = 0
      if self.isHeartbeat is None:
        self.isHeartbeat = False
      if self.isStop is None:
        self.isStop = False
    else:
      self.sceneName = ''
      self.layerVec = []
      self.senderID = 0
      self.isHeartbeat = False
      self.isStop = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.sceneName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.layerVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.layerVec:
        _x = val1.layerName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.actorVec)
        buff.write(_struct_I.pack(length))
        for val2 in val1.actorVec:
          buff.write(_get_struct_i().pack(val2.swarmID))
          _x = val2.taskName
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.actorName
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          buff.write(_get_struct_i().pack(val2.robotID))
          length = len(val2.dataTypeVec)
          buff.write(_struct_I.pack(length))
          for val3 in val2.dataTypeVec:
            length = len(val3)
            if python3 or type(val3) == unicode:
              val3 = val3.encode('utf-8')
              length = len(val3)
            buff.write(struct.pack('<I%ss'%length, length, val3))
        _x = val1
        buff.write(_get_struct_B6di().pack(_x.spaceConstraint, _x.xMin, _x.xMax, _x.yMin, _x.yMax, _x.zMin, _x.zMax, _x.layerType))
        _x = val1.timeStart
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.timeEnd
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_i().pack(val1.frequency))
        length = len(val1.eventMsgVec)
        buff.write(_struct_I.pack(length))
        for val2 in val1.eventMsgVec:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        buff.write(_get_struct_B().pack(val1.isStop))
      _x = self
      buff.write(_get_struct_i2B().pack(_x.senderID, _x.isHeartbeat, _x.isStop))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.layerVec is None:
        self.layerVec = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sceneName = str[start:end].decode('utf-8')
      else:
        self.sceneName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.layerVec = []
      for i in range(0, length):
        val1 = abstract_msgs.msg.LayerQuery()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.layerName = str[start:end].decode('utf-8')
        else:
          val1.layerName = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.actorVec = []
        for i in range(0, length):
          val2 = abstract_msgs.msg.ActorQuery()
          start = end
          end += 4
          (val2.swarmID,) = _get_struct_i().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.taskName = str[start:end].decode('utf-8')
          else:
            val2.taskName = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.actorName = str[start:end].decode('utf-8')
          else:
            val2.actorName = str[start:end]
          start = end
          end += 4
          (val2.robotID,) = _get_struct_i().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.dataTypeVec = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3 = str[start:end].decode('utf-8')
            else:
              val3 = str[start:end]
            val2.dataTypeVec.append(val3)
          val1.actorVec.append(val2)
        _x = val1
        start = end
        end += 53
        (_x.spaceConstraint, _x.xMin, _x.xMax, _x.yMin, _x.yMax, _x.zMin, _x.zMax, _x.layerType,) = _get_struct_B6di().unpack(str[start:end])
        val1.spaceConstraint = bool(val1.spaceConstraint)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.timeStart = str[start:end].decode('utf-8')
        else:
          val1.timeStart = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.timeEnd = str[start:end].decode('utf-8')
        else:
          val1.timeEnd = str[start:end]
        start = end
        end += 4
        (val1.frequency,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.eventMsgVec = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.eventMsgVec.append(val2)
        start = end
        end += 1
        (val1.isStop,) = _get_struct_B().unpack(str[start:end])
        val1.isStop = bool(val1.isStop)
        self.layerVec.append(val1)
      _x = self
      start = end
      end += 6
      (_x.senderID, _x.isHeartbeat, _x.isStop,) = _get_struct_i2B().unpack(str[start:end])
      self.isHeartbeat = bool(self.isHeartbeat)
      self.isStop = bool(self.isStop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.sceneName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.layerVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.layerVec:
        _x = val1.layerName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.actorVec)
        buff.write(_struct_I.pack(length))
        for val2 in val1.actorVec:
          buff.write(_get_struct_i().pack(val2.swarmID))
          _x = val2.taskName
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.actorName
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          buff.write(_get_struct_i().pack(val2.robotID))
          length = len(val2.dataTypeVec)
          buff.write(_struct_I.pack(length))
          for val3 in val2.dataTypeVec:
            length = len(val3)
            if python3 or type(val3) == unicode:
              val3 = val3.encode('utf-8')
              length = len(val3)
            buff.write(struct.pack('<I%ss'%length, length, val3))
        _x = val1
        buff.write(_get_struct_B6di().pack(_x.spaceConstraint, _x.xMin, _x.xMax, _x.yMin, _x.yMax, _x.zMin, _x.zMax, _x.layerType))
        _x = val1.timeStart
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.timeEnd
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_i().pack(val1.frequency))
        length = len(val1.eventMsgVec)
        buff.write(_struct_I.pack(length))
        for val2 in val1.eventMsgVec:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        buff.write(_get_struct_B().pack(val1.isStop))
      _x = self
      buff.write(_get_struct_i2B().pack(_x.senderID, _x.isHeartbeat, _x.isStop))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.layerVec is None:
        self.layerVec = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sceneName = str[start:end].decode('utf-8')
      else:
        self.sceneName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.layerVec = []
      for i in range(0, length):
        val1 = abstract_msgs.msg.LayerQuery()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.layerName = str[start:end].decode('utf-8')
        else:
          val1.layerName = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.actorVec = []
        for i in range(0, length):
          val2 = abstract_msgs.msg.ActorQuery()
          start = end
          end += 4
          (val2.swarmID,) = _get_struct_i().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.taskName = str[start:end].decode('utf-8')
          else:
            val2.taskName = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.actorName = str[start:end].decode('utf-8')
          else:
            val2.actorName = str[start:end]
          start = end
          end += 4
          (val2.robotID,) = _get_struct_i().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.dataTypeVec = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3 = str[start:end].decode('utf-8')
            else:
              val3 = str[start:end]
            val2.dataTypeVec.append(val3)
          val1.actorVec.append(val2)
        _x = val1
        start = end
        end += 53
        (_x.spaceConstraint, _x.xMin, _x.xMax, _x.yMin, _x.yMax, _x.zMin, _x.zMax, _x.layerType,) = _get_struct_B6di().unpack(str[start:end])
        val1.spaceConstraint = bool(val1.spaceConstraint)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.timeStart = str[start:end].decode('utf-8')
        else:
          val1.timeStart = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.timeEnd = str[start:end].decode('utf-8')
        else:
          val1.timeEnd = str[start:end]
        start = end
        end += 4
        (val1.frequency,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.eventMsgVec = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.eventMsgVec.append(val2)
        start = end
        end += 1
        (val1.isStop,) = _get_struct_B().unpack(str[start:end])
        val1.isStop = bool(val1.isStop)
        self.layerVec.append(val1)
      _x = self
      start = end
      end += 6
      (_x.senderID, _x.isHeartbeat, _x.isStop,) = _get_struct_i2B().unpack(str[start:end])
      self.isHeartbeat = bool(self.isHeartbeat)
      self.isStop = bool(self.isStop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_B6di = None
def _get_struct_B6di():
    global _struct_B6di
    if _struct_B6di is None:
        _struct_B6di = struct.Struct("<B6di")
    return _struct_B6di
_struct_i2B = None
def _get_struct_i2B():
    global _struct_i2B
    if _struct_i2B is None:
        _struct_i2B = struct.Struct("<i2B")
    return _struct_i2B
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
