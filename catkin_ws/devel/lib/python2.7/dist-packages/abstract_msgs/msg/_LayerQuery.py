# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from abstract_msgs/LayerQuery.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import abstract_msgs.msg

class LayerQuery(genpy.Message):
  _md5sum = "f055341a31be956bd0e168a756124afc"
  _type = "abstract_msgs/LayerQuery"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string layerName

ActorQuery[] actorVec

bool spaceConstraint
float64 xMin
float64 xMax
float64 yMin
float64 yMax
float64 zMin
float64 zMax

int32 layerType

string timeStart
string timeEnd

int32 frequency

string[] eventMsgVec

bool isStop
================================================================================
MSG: abstract_msgs/ActorQuery
int32 swarmID
string taskName
string actorName
int32 robotID
string[] dataTypeVec"""
  __slots__ = ['layerName','actorVec','spaceConstraint','xMin','xMax','yMin','yMax','zMin','zMax','layerType','timeStart','timeEnd','frequency','eventMsgVec','isStop']
  _slot_types = ['string','abstract_msgs/ActorQuery[]','bool','float64','float64','float64','float64','float64','float64','int32','string','string','int32','string[]','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       layerName,actorVec,spaceConstraint,xMin,xMax,yMin,yMax,zMin,zMax,layerType,timeStart,timeEnd,frequency,eventMsgVec,isStop

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LayerQuery, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.layerName is None:
        self.layerName = ''
      if self.actorVec is None:
        self.actorVec = []
      if self.spaceConstraint is None:
        self.spaceConstraint = False
      if self.xMin is None:
        self.xMin = 0.
      if self.xMax is None:
        self.xMax = 0.
      if self.yMin is None:
        self.yMin = 0.
      if self.yMax is None:
        self.yMax = 0.
      if self.zMin is None:
        self.zMin = 0.
      if self.zMax is None:
        self.zMax = 0.
      if self.layerType is None:
        self.layerType = 0
      if self.timeStart is None:
        self.timeStart = ''
      if self.timeEnd is None:
        self.timeEnd = ''
      if self.frequency is None:
        self.frequency = 0
      if self.eventMsgVec is None:
        self.eventMsgVec = []
      if self.isStop is None:
        self.isStop = False
    else:
      self.layerName = ''
      self.actorVec = []
      self.spaceConstraint = False
      self.xMin = 0.
      self.xMax = 0.
      self.yMin = 0.
      self.yMax = 0.
      self.zMin = 0.
      self.zMax = 0.
      self.layerType = 0
      self.timeStart = ''
      self.timeEnd = ''
      self.frequency = 0
      self.eventMsgVec = []
      self.isStop = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.layerName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.actorVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.actorVec:
        buff.write(_get_struct_i().pack(val1.swarmID))
        _x = val1.taskName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.actorName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_i().pack(val1.robotID))
        length = len(val1.dataTypeVec)
        buff.write(_struct_I.pack(length))
        for val2 in val1.dataTypeVec:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
      _x = self
      buff.write(_get_struct_B6di().pack(_x.spaceConstraint, _x.xMin, _x.xMax, _x.yMin, _x.yMax, _x.zMin, _x.zMax, _x.layerType))
      _x = self.timeStart
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.timeEnd
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.frequency))
      length = len(self.eventMsgVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.eventMsgVec:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      buff.write(_get_struct_B().pack(self.isStop))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.actorVec is None:
        self.actorVec = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.layerName = str[start:end].decode('utf-8')
      else:
        self.layerName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.actorVec = []
      for i in range(0, length):
        val1 = abstract_msgs.msg.ActorQuery()
        start = end
        end += 4
        (val1.swarmID,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.taskName = str[start:end].decode('utf-8')
        else:
          val1.taskName = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.actorName = str[start:end].decode('utf-8')
        else:
          val1.actorName = str[start:end]
        start = end
        end += 4
        (val1.robotID,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.dataTypeVec = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.dataTypeVec.append(val2)
        self.actorVec.append(val1)
      _x = self
      start = end
      end += 53
      (_x.spaceConstraint, _x.xMin, _x.xMax, _x.yMin, _x.yMax, _x.zMin, _x.zMax, _x.layerType,) = _get_struct_B6di().unpack(str[start:end])
      self.spaceConstraint = bool(self.spaceConstraint)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timeStart = str[start:end].decode('utf-8')
      else:
        self.timeStart = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timeEnd = str[start:end].decode('utf-8')
      else:
        self.timeEnd = str[start:end]
      start = end
      end += 4
      (self.frequency,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.eventMsgVec = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.eventMsgVec.append(val1)
      start = end
      end += 1
      (self.isStop,) = _get_struct_B().unpack(str[start:end])
      self.isStop = bool(self.isStop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.layerName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.actorVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.actorVec:
        buff.write(_get_struct_i().pack(val1.swarmID))
        _x = val1.taskName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.actorName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_i().pack(val1.robotID))
        length = len(val1.dataTypeVec)
        buff.write(_struct_I.pack(length))
        for val2 in val1.dataTypeVec:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
      _x = self
      buff.write(_get_struct_B6di().pack(_x.spaceConstraint, _x.xMin, _x.xMax, _x.yMin, _x.yMax, _x.zMin, _x.zMax, _x.layerType))
      _x = self.timeStart
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.timeEnd
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.frequency))
      length = len(self.eventMsgVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.eventMsgVec:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      buff.write(_get_struct_B().pack(self.isStop))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.actorVec is None:
        self.actorVec = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.layerName = str[start:end].decode('utf-8')
      else:
        self.layerName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.actorVec = []
      for i in range(0, length):
        val1 = abstract_msgs.msg.ActorQuery()
        start = end
        end += 4
        (val1.swarmID,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.taskName = str[start:end].decode('utf-8')
        else:
          val1.taskName = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.actorName = str[start:end].decode('utf-8')
        else:
          val1.actorName = str[start:end]
        start = end
        end += 4
        (val1.robotID,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.dataTypeVec = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.dataTypeVec.append(val2)
        self.actorVec.append(val1)
      _x = self
      start = end
      end += 53
      (_x.spaceConstraint, _x.xMin, _x.xMax, _x.yMin, _x.yMax, _x.zMin, _x.zMax, _x.layerType,) = _get_struct_B6di().unpack(str[start:end])
      self.spaceConstraint = bool(self.spaceConstraint)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timeStart = str[start:end].decode('utf-8')
      else:
        self.timeStart = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timeEnd = str[start:end].decode('utf-8')
      else:
        self.timeEnd = str[start:end]
      start = end
      end += 4
      (self.frequency,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.eventMsgVec = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.eventMsgVec.append(val1)
      start = end
      end += 1
      (self.isStop,) = _get_struct_B().unpack(str[start:end])
      self.isStop = bool(self.isStop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_B6di = None
def _get_struct_B6di():
    global _struct_B6di
    if _struct_B6di is None:
        _struct_B6di = struct.Struct("<B6di")
    return _struct_B6di
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
