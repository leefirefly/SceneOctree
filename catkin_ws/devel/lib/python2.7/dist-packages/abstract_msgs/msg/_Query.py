# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from abstract_msgs/Query.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Query(genpy.Message):
  _md5sum = "708be305c5f963a9c77602e531dba1e3"
  _type = "abstract_msgs/Query"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 xMin
float64 xMax
float64 yMin
float64 yMax
float64 zMin
float64 zMax

string timeStart
string timeEnd

int32 frequency

int32 swarmID
string taskName
string actorName
int32 robotID
string[] dataTypeVec"""
  __slots__ = ['xMin','xMax','yMin','yMax','zMin','zMax','timeStart','timeEnd','frequency','swarmID','taskName','actorName','robotID','dataTypeVec']
  _slot_types = ['float64','float64','float64','float64','float64','float64','string','string','int32','int32','string','string','int32','string[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       xMin,xMax,yMin,yMax,zMin,zMax,timeStart,timeEnd,frequency,swarmID,taskName,actorName,robotID,dataTypeVec

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Query, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.xMin is None:
        self.xMin = 0.
      if self.xMax is None:
        self.xMax = 0.
      if self.yMin is None:
        self.yMin = 0.
      if self.yMax is None:
        self.yMax = 0.
      if self.zMin is None:
        self.zMin = 0.
      if self.zMax is None:
        self.zMax = 0.
      if self.timeStart is None:
        self.timeStart = ''
      if self.timeEnd is None:
        self.timeEnd = ''
      if self.frequency is None:
        self.frequency = 0
      if self.swarmID is None:
        self.swarmID = 0
      if self.taskName is None:
        self.taskName = ''
      if self.actorName is None:
        self.actorName = ''
      if self.robotID is None:
        self.robotID = 0
      if self.dataTypeVec is None:
        self.dataTypeVec = []
    else:
      self.xMin = 0.
      self.xMax = 0.
      self.yMin = 0.
      self.yMax = 0.
      self.zMin = 0.
      self.zMax = 0.
      self.timeStart = ''
      self.timeEnd = ''
      self.frequency = 0
      self.swarmID = 0
      self.taskName = ''
      self.actorName = ''
      self.robotID = 0
      self.dataTypeVec = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.xMin, _x.xMax, _x.yMin, _x.yMax, _x.zMin, _x.zMax))
      _x = self.timeStart
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.timeEnd
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.frequency, _x.swarmID))
      _x = self.taskName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.actorName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.robotID))
      length = len(self.dataTypeVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.dataTypeVec:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.xMin, _x.xMax, _x.yMin, _x.yMax, _x.zMin, _x.zMax,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timeStart = str[start:end].decode('utf-8')
      else:
        self.timeStart = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timeEnd = str[start:end].decode('utf-8')
      else:
        self.timeEnd = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.frequency, _x.swarmID,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.taskName = str[start:end].decode('utf-8')
      else:
        self.taskName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.actorName = str[start:end].decode('utf-8')
      else:
        self.actorName = str[start:end]
      start = end
      end += 4
      (self.robotID,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dataTypeVec = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.dataTypeVec.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.xMin, _x.xMax, _x.yMin, _x.yMax, _x.zMin, _x.zMax))
      _x = self.timeStart
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.timeEnd
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.frequency, _x.swarmID))
      _x = self.taskName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.actorName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.robotID))
      length = len(self.dataTypeVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.dataTypeVec:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.xMin, _x.xMax, _x.yMin, _x.yMax, _x.zMin, _x.zMax,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timeStart = str[start:end].decode('utf-8')
      else:
        self.timeStart = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timeEnd = str[start:end].decode('utf-8')
      else:
        self.timeEnd = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.frequency, _x.swarmID,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.taskName = str[start:end].decode('utf-8')
      else:
        self.taskName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.actorName = str[start:end].decode('utf-8')
      else:
        self.actorName = str[start:end]
      start = end
      end += 4
      (self.robotID,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dataTypeVec = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.dataTypeVec.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
