# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from abstract_msgs/UnifiedData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class UnifiedData(genpy.Message):
  _md5sum = "48cec9a0486f5d717da700cd21865426"
  _type = "abstract_msgs/UnifiedData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 swarmID
string taskName
string actorName
int32 robotID
string timeStamp
geometry_msgs/Pose robotPose
geometry_msgs/Pose sensorPose
string dataType
uint8[] data
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['swarmID','taskName','actorName','robotID','timeStamp','robotPose','sensorPose','dataType','data']
  _slot_types = ['int32','string','string','int32','string','geometry_msgs/Pose','geometry_msgs/Pose','string','uint8[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       swarmID,taskName,actorName,robotID,timeStamp,robotPose,sensorPose,dataType,data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UnifiedData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.swarmID is None:
        self.swarmID = 0
      if self.taskName is None:
        self.taskName = ''
      if self.actorName is None:
        self.actorName = ''
      if self.robotID is None:
        self.robotID = 0
      if self.timeStamp is None:
        self.timeStamp = ''
      if self.robotPose is None:
        self.robotPose = geometry_msgs.msg.Pose()
      if self.sensorPose is None:
        self.sensorPose = geometry_msgs.msg.Pose()
      if self.dataType is None:
        self.dataType = ''
      if self.data is None:
        self.data = b''
    else:
      self.swarmID = 0
      self.taskName = ''
      self.actorName = ''
      self.robotID = 0
      self.timeStamp = ''
      self.robotPose = geometry_msgs.msg.Pose()
      self.sensorPose = geometry_msgs.msg.Pose()
      self.dataType = ''
      self.data = b''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_i().pack(self.swarmID))
      _x = self.taskName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.actorName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.robotID))
      _x = self.timeStamp
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_14d().pack(_x.robotPose.position.x, _x.robotPose.position.y, _x.robotPose.position.z, _x.robotPose.orientation.x, _x.robotPose.orientation.y, _x.robotPose.orientation.z, _x.robotPose.orientation.w, _x.sensorPose.position.x, _x.sensorPose.position.y, _x.sensorPose.position.z, _x.sensorPose.orientation.x, _x.sensorPose.orientation.y, _x.sensorPose.orientation.z, _x.sensorPose.orientation.w))
      _x = self.dataType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.robotPose is None:
        self.robotPose = geometry_msgs.msg.Pose()
      if self.sensorPose is None:
        self.sensorPose = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 4
      (self.swarmID,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.taskName = str[start:end].decode('utf-8')
      else:
        self.taskName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.actorName = str[start:end].decode('utf-8')
      else:
        self.actorName = str[start:end]
      start = end
      end += 4
      (self.robotID,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timeStamp = str[start:end].decode('utf-8')
      else:
        self.timeStamp = str[start:end]
      _x = self
      start = end
      end += 112
      (_x.robotPose.position.x, _x.robotPose.position.y, _x.robotPose.position.z, _x.robotPose.orientation.x, _x.robotPose.orientation.y, _x.robotPose.orientation.z, _x.robotPose.orientation.w, _x.sensorPose.position.x, _x.sensorPose.position.y, _x.sensorPose.position.z, _x.sensorPose.orientation.x, _x.sensorPose.orientation.y, _x.sensorPose.orientation.z, _x.sensorPose.orientation.w,) = _get_struct_14d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dataType = str[start:end].decode('utf-8')
      else:
        self.dataType = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_i().pack(self.swarmID))
      _x = self.taskName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.actorName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.robotID))
      _x = self.timeStamp
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_14d().pack(_x.robotPose.position.x, _x.robotPose.position.y, _x.robotPose.position.z, _x.robotPose.orientation.x, _x.robotPose.orientation.y, _x.robotPose.orientation.z, _x.robotPose.orientation.w, _x.sensorPose.position.x, _x.sensorPose.position.y, _x.sensorPose.position.z, _x.sensorPose.orientation.x, _x.sensorPose.orientation.y, _x.sensorPose.orientation.z, _x.sensorPose.orientation.w))
      _x = self.dataType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.robotPose is None:
        self.robotPose = geometry_msgs.msg.Pose()
      if self.sensorPose is None:
        self.sensorPose = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 4
      (self.swarmID,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.taskName = str[start:end].decode('utf-8')
      else:
        self.taskName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.actorName = str[start:end].decode('utf-8')
      else:
        self.actorName = str[start:end]
      start = end
      end += 4
      (self.robotID,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timeStamp = str[start:end].decode('utf-8')
      else:
        self.timeStamp = str[start:end]
      _x = self
      start = end
      end += 112
      (_x.robotPose.position.x, _x.robotPose.position.y, _x.robotPose.position.z, _x.robotPose.orientation.x, _x.robotPose.orientation.y, _x.robotPose.orientation.z, _x.robotPose.orientation.w, _x.sensorPose.position.x, _x.sensorPose.position.y, _x.sensorPose.position.z, _x.sensorPose.orientation.x, _x.sensorPose.orientation.y, _x.sensorPose.orientation.z, _x.sensorPose.orientation.w,) = _get_struct_14d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dataType = str[start:end].decode('utf-8')
      else:
        self.dataType = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_14d = None
def _get_struct_14d():
    global _struct_14d
    if _struct_14d is None:
        _struct_14d = struct.Struct("<14d")
    return _struct_14d
